# GitLab CI/CD Pipeline for Tuya Device Controller
# Alternative to GitHub Actions for GitLab users

stages:
  - build
  - test
  - security
  - package
  - deploy

variables:
  NODE_VERSION: "20"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY_IMAGE: $CI_REGISTRY_IMAGE

# Template for Node.js jobs
.node_template: &node_template
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
      - node_modules/

# Build stage
build:
  <<: *node_template
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  only:
    - main
    - merge_requests
    - tags

# Code quality and linting
lint:
  <<: *node_template
  stage: test
  script:
    - npm run lint
  only:
    - main
    - merge_requests

# Type checking
typecheck:
  <<: *node_template
  stage: test
  script:
    - npx tsc --noEmit
  only:
    - main
    - merge_requests

# Security audit
security-audit:
  <<: *node_template
  stage: security
  script:
    - npm audit --audit-level moderate
  allow_failure: true
  only:
    - main
    - merge_requests

# Container vulnerability scanning
container-security:
  stage: security
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - apk add --no-cache wget
  script:
    - docker build -t test-image .
    - wget https://github.com/aquasecurity/trivy/releases/download/v0.45.0/trivy_0.45.0_Linux-64bit.tar.gz
    - tar zxvf trivy_0.45.0_Linux-64bit.tar.gz
    - ./trivy image --exit-code 0 --format template --template "@contrib/sarif.tpl" -o trivy-results.sarif test-image
    - ./trivy image --exit-code 1 --severity HIGH,CRITICAL test-image
  artifacts:
    reports:
      sast: trivy-results.sarif
  only:
    - main
    - merge_requests

# Build and push Docker image
docker-build:
  stage: package
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

# Build and push tagged releases
docker-release:
  stage: package
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - tags

# Deploy to staging
deploy-staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    # Add your staging deployment commands here
    # Example: kubectl apply -f k8s/staging/
    # Example: docker-compose -f docker-compose.staging.yml up -d
  environment:
    name: staging
    url: https://staging.tuya-controller.example.com
  only:
    - main

# Deploy to production
deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Image: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    # Add your production deployment commands here
    # Example: kubectl apply -f k8s/production/
    # Example: helm upgrade --install tuya-controller ./helm-chart
  environment:
    name: production
    url: https://tuya-controller.example.com
  when: manual
  only:
    - tags

# Cleanup old images (optional)
cleanup:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Cleaning up old container images..."
    # Add cleanup commands here if needed
  when: manual
  only:
    - schedules